// <auto-generated />
using System;
using EShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EShop.Migrations
{
    [DbContext(typeof(EShopContext))]
    [Migration("20220810090021_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CategoryItem", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("ItemsId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "ItemsId");

                    b.HasIndex("ItemsId");

                    b.ToTable("CategoryItem");
                });

            modelBuilder.Entity("EShop.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("EShop.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ItemId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("EShop.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "فروش انواع لپ تاپ های نو اپن باکس استوک و دست دوم",
                            Name = "لپ تاپ"
                        },
                        new
                        {
                            Id = 2,
                            Description = "فروش گوشی های نو از برند های مختلف با فیمت عمده",
                            Name = "گوشی"
                        },
                        new
                        {
                            Id = 3,
                            Description = "انواع پیسی و مینی کیس و آل این وان های قدرتمند صنعتی، گیمینگ ، اقتصادی و اداری",
                            Name = "کامپیوتر"
                        },
                        new
                        {
                            Id = 4,
                            Description = "لوازم جانبی و سخت افزاری گوشی لپ تاپ و پیسی",
                            Name = "لوازم جانبی"
                        },
                        new
                        {
                            Id = 5,
                            Description = "انواع بازی های هکی و قانونی برای پی اس فور ایکس باکس و پیسی",
                            Name = "بازی"
                        });
                });

            modelBuilder.Entity("EShop.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Discount = 0f,
                            Price = 22000000L,
                            ProductId = 1,
                            QuantityInStock = 3
                        },
                        new
                        {
                            Id = 2,
                            Discount = 0f,
                            Price = 10000000L,
                            ProductId = 2,
                            QuantityInStock = 20
                        },
                        new
                        {
                            Id = 3,
                            Discount = 2f,
                            Price = 100000L,
                            ProductId = 3,
                            QuantityInStock = 10
                        });
                });

            modelBuilder.Entity("EShop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "monitor : 144hz\nCpu : Core i5 10600 U",
                            Images = "Laptop-front.png,1.jpg",
                            Name = "Pavilion Gaming 15 لپ تاپ"
                        },
                        new
                        {
                            Id = 2,
                            Description = "monitor : 90hz\nSize : 15 inch",
                            Images = "2.jpg",
                            Name = "A52 گوشی"
                        },
                        new
                        {
                            Id = 3,
                            Description = "120 w\n5 volt",
                            Images = "3.jpg",
                            Name = "شارژر شیائومی"
                        });
                });

            modelBuilder.Entity("EShop.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EShop.Models.ViewModel.LoginViewModel", b =>
                {
                    b.Property<string>("PhoneOrEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsCalledFromRegister")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("bit");

                    b.HasKey("PhoneOrEmail");

                    b.ToTable("LoginViewModel");
                });

            modelBuilder.Entity("CategoryItem", b =>
                {
                    b.HasOne("EShop.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EShop.Models.Cart", b =>
                {
                    b.HasOne("EShop.Models.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("EShop.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EShop.Models.CartItem", b =>
                {
                    b.HasOne("EShop.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.Navigation("Cart");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("EShop.Models.Item", b =>
                {
                    b.HasOne("EShop.Models.Product", "Product")
                        .WithOne("Item")
                        .HasForeignKey("EShop.Models.Item", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EShop.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("EShop.Models.Product", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("EShop.Models.User", b =>
                {
                    b.Navigation("Cart");
                });
#pragma warning restore 612, 618
        }
    }
}
